/* Map & UI logic — same features as before but using FastAPI REST+WS */
function mulberry32(a){return function(){let t=a+=0x6D2B79F5;t=Math.imul(t^t>>>15,t|1);t^=t+Math.imul(t^t>>>7,t|61);return ((t^t>>>14)>>>0)/4294967296}}
function xmur3(str){let h=1779033703^str.length;for(let i=0;i<str.length;i++){h=Math.imul(h^str.charCodeAt(i),3432918353);h=h<<13|h>>>19;}return function(){h=Math.imul(h^h>>>16,2246822507);h=Math.imul(h^h>>>13,3266489909);return (h^h>>>16)>>>0}}
function diamondSquare(size, rng){const N=size;const m=new Float32Array(N*N);const I=(x,y)=>y*N+x;m[I(0,0)]=rng();m[I(N-1,0)]=rng();m[I(0,N-1)]=rng();m[I(N-1,N-1)]=rng();let s=N-1,r=0.8;while(s>1){let h=s>>1;for(let y=h;y<N-1;y+=s){for(let x=h;x<N-1;x+=s){const a=m[I(x-h,y-h)],b=m[I(x+h,y-h)],c=m[I(x-h,y+h)],d=m[I(x+h,y+h)];m[I(x,y)]=((a+b+c+d)/4)+(rng()*2-1)*r;}}for(let y=0;y<N;y+=h){for(let x=(y+h)%s;x<N;x+=s){const a=m[I((x-s+N-1)%(N-1),y)]||0,b=m[I((x+s)%(N-1),y)]||0,c=m[I(x,(y-s+N-1)%(N-1))]||0,d=m[I(x,(y+s)%(N-1))]||0;m[I(x,y)]=((a+b+c+d)/4)+(rng()*2-1)*r;}}s>>=1;r*=0.55;}let mn=Infinity,mx=-Infinity;for(let i=0;i<m.length;i++){if(m[i]<mn)mn=m[i];if(m[i]>mx)mx=m[i];}const sp=mx-mn||1;for(let i=0;i<m.length;i++){m[i]=(m[i]-mn)/sp;}return {data:m,N};}
function colorFor(h,m,p){if(p==="galaxy"){if(h<0.35)return[5,5,20];if(h<0.5)return[30,20,60];if(h<0.65)return[80,30,120];if(h<0.8)return[170,60,200];return[240,200,255];}if(h<0.30)return[20,40,120];if(h<0.34)return[25,80,160];if(h<0.38)return[194,178,128];if(h<0.55)return m>0.5?[35,110,55]:[85,130,70];if(h<0.72)return m>0.55?[34,85,45]:[100,120,80];if(h<0.86)return[110,110,110];return[235,235,235];}

const canvas=document.getElementById("map"), fog=document.getElementById("fog");
const ctx=canvas.getContext("2d"), fctx=fog.getContext("2d");
const seedInput=document.getElementById("seed"), sizeSel=document.getElementById("size"), paletteSel=document.getElementById("palette"), hexToggle=document.getElementById("hexToggle"), fogToggle=document.getElementById("fogToggle"), roleSel=document.getElementById("role");
document.getElementById("regen").onclick=()=>generate(); document.getElementById("randomSeed").onclick=()=>{seedInput.value="seed-"+Math.random().toString(36).slice(2,8);generate();}; document.getElementById("exportPNG").onclick=exportPNG;
const markersEl=document.getElementById("markers"), persistenceEl=document.getElementById("persistence"), multiEl=document.getElementById("multi");
const form=document.getElementById("markerForm"), mType=document.getElementById("mType"), mLabel=document.getElementById("mLabel"), mNotes=document.getElementById("mNotes");
let currentSeed="", currentSize=257, markers=[], placingMode=false, ws=null;

function wsConnect(){ if(ws){try{ws.close();}catch{}} const proto=location.protocol==="https:"?"wss":"ws"; ws=new WebSocket(`${proto}://${location.host}/ws/${encodeURIComponent(currentSeed)}`); ws.onopen=()=>multiEl.textContent="connecté"; ws.onclose=()=>multiEl.textContent="déconnecté"; ws.onmessage=(ev)=>{const msg=JSON.parse(ev.data); if(msg.op==="snapshot"){markers=msg.markers||[]; renderAll();} else if(msg.op==="added"){markers.push(msg.marker); drawPin(msg.marker.x,msg.marker.y,msg.marker.color); renderMarkers();} else if(msg.op==="removed"){markers=markers.filter(m=>String(m.id)!==String(msg.id)); redrawPins();}};}
function apiHealth(){return fetch("/api/health").then(r=>r.json()).catch(()=>({ok:false,db:false}));}
function apiDel(id,seed){return fetch(`/api/markers/${id}?seed=${encodeURIComponent(seed)}`,{method:"DELETE"}).then(r=>r.json());}

form.addEventListener("submit",(ev)=>{ev.preventDefault(); placingMode=true; alert("Clique sur la carte pour placer ce marqueur.");});
canvas.addEventListener("click",(ev)=>{const rect=canvas.getBoundingClientRect(); const x=Math.floor((ev.clientX-rect.left)/rect.width*canvas.width); const y=Math.floor((ev.clientY-rect.top)/rect.height*canvas.height);
  if(placingMode){const label=mLabel.value.trim(); if(!label) return alert("Nom requis."); const notes=mNotes.value.trim(); const type=mType.value; const color=type==="pnj"?"#ffd166":(type==="quete"?"#f72585":"#06d6a0"); const m={seed:currentSeed,x,y,label,color,type,notes}; try{ws.send(JSON.stringify({op:"add",marker:m}));}catch{} drawPin(x,y,color); placingMode=false; mLabel.value=""; mNotes.value="";}
  else if(roleSel.value==="mj"&&fogToggle.checked){revealFog(x,y,60);}
});

function drawMap(seed,N){const seedHash=xmur3(seed)(); const rng=mulberry32(seedHash); const {data,size}=diamondSquare(N,rng); const rng2=mulberry32(xmur3(seed+"-moist")()); const moist=diamondSquare(N,rng2).data; const palette=paletteSel.value; const img=ctx.createImageData(canvas.width,canvas.height);
  for(let y=0;y<canvas.height;y++){for(let x=0;x<canvas.width;x++){const gx=Math.floor(x/(canvas.width/(size))); const gy=Math.floor(y/(canvas.height/(size))); const h=data[gy*size+gx]||0; const m=moist[gy*size+gx]||0; const [r,g,b]=colorFor(h,m,palette); const i=(y*canvas.width+x)*4; img.data[i]=r; img.data[i+1]=g; img.data[i+2]=b; img.data[i+3]=255;}} ctx.putImageData(img,0,0);
  const rad=ctx.createRadialGradient(canvas.width/2,canvas.height/2,Math.min(canvas.width,canvas.height)/3,canvas.width/2,canvas.height/2,Math.max(canvas.width,canvas.height)/1.1); rad.addColorStop(0,"rgba(0,0,0,0)"); rad.addColorStop(1,"rgba(0,0,0,0.45)"); ctx.fillStyle=rad; ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.globalAlpha=0.08; ctx.strokeStyle="#ffffff"; ctx.lineWidth=1; ctx.beginPath(); const step=2; for(let y=1;y<size-1;y+=step){for(let x=1;x<size-1;x+=step){const h=data[y*size+x]; if(h>0.33&&h<0.40){const px=Math.floor(x*(canvas.width/size)); const py=Math.floor(y*(canvas.height/size)); ctx.moveTo(px,py); ctx.lineTo(px+1,py+1);}}} ctx.stroke(); ctx.globalAlpha=1;
  drawHexGrid(hexToggle.checked?32:0); drawFogLayer();}
function drawHexGrid(s){if(!s)return; ctx.save(); ctx.globalAlpha=0.25; ctx.strokeStyle="#ffffff"; const w=canvas.width,h=canvas.height; const r=s/2, hexH=Math.sqrt(3)*r; const cols=Math.ceil(w/(3*r)), rows=Math.ceil(h/hexH); for(let row=0;row<=rows;row++){for(let col=0;col<=cols;col++){const x=col*3*r+(row%2?1.5*r:0.75*r); const y=row*hexH; drawHex(x,y,r);}} ctx.restore();}
function drawHex(cx,cy,r){ctx.beginPath(); for(let i=0;i<6;i++){const a=Math.PI/3*i; const x=cx+r*Math.cos(a), y=cy+r*Math.sin(a); if(i===0)ctx.moveTo(x,y); else ctx.lineTo(x,y);} ctx.closePath(); ctx.stroke();}
function drawFogLayer(){fctx.clearRect(0,0,fog.width,fog.height); if(!fogToggle.checked){fog.style.display="none"; return;} fog.style.display="block"; fctx.fillStyle="rgba(0,0,0,0.55)"; fctx.fillRect(0,0,fog.width,fog.height); fog.style.pointerEvents=roleSel.value==="mj"?"auto":"none";}
function revealFog(x,y,r){fctx.globalCompositeOperation="destination-out"; const grd=fctx.createRadialGradient(x,y,0,x,y,r); grd.addColorStop(0,"rgba(0,0,0,1)"); grd.addColorStop(1,"rgba(0,0,0,0)"); fctx.fillStyle=grd; fctx.beginPath(); fctx.arc(x,y,r,0,Math.PI*2); fctx.fill(); fctx.globalCompositeOperation="source-over";}
function drawPin(x,y,c){ctx.fillStyle=c; ctx.beginPath(); ctx.arc(x,y,5,0,Math.PI*2); ctx.fill(); ctx.strokeStyle="#000"; ctx.lineWidth=1; ctx.stroke();}
function renderMarkers(){markersEl.innerHTML=""; for(const m of markers){const li=document.createElement("li"); li.className="marker"; const left=document.createElement("div"); left.className="left"; const dot=document.createElement("span"); dot.className="dot"; dot.style.background=m.color; const txt=document.createElement("span"); txt.textContent=`[${m.type}] ${m.label}`; left.appendChild(dot); left.appendChild(txt); li.appendChild(left); if(roleSel.value==="mj" && m.id){const btn=document.createElement("button"); btn.textContent="Supprimer"; btn.onclick=async()=>{await apiDel(m.id,currentSeed)}; li.appendChild(btn);} markersEl.appendChild(li);}}
function redrawPins(){drawMap(currentSeed,currentSize); for(const mm of markers){drawPin(mm.x,mm.y,mm.color);} renderMarkers();}
function renderAll(){redrawPins();}

async function generate(){currentSeed=seedInput.value.trim()||"seed"; currentSize=parseInt(sizeSel.value,10); canvas.width=1024; canvas.height=1024; fog.width=1024; fog.height=1024; renderAll(); const h=await apiHealth(); persistenceEl.textContent=h.db?"Base de données active (Postgres)":"Pas de base (mode démo)"; wsConnect();}
hexToggle.addEventListener("change",()=>renderAll()); fogToggle.addEventListener("change",()=>drawFogLayer()); paletteSel.addEventListener("change",()=>renderAll()); roleSel.addEventListener("change",()=>{renderMarkers(); drawFogLayer();});
function exportPNG(){const off=document.createElement("canvas"); off.width=canvas.width; off.height=canvas.height; const octx=off.getContext("2d"); octx.drawImage(canvas,0,0); octx.drawImage(fog,0,0); const a=document.createElement("a"); a.download=`map_${currentSeed}.png`; a.href=off.toDataURL("image/png"); a.click();}
window.addEventListener("load",()=>{if(!seedInput.value) seedInput.value="Bourgogne-"+new Date().toISOString().slice(0,10); generate();});
